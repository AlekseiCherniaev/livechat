services:
  api:
    build: .
    container_name: chat-api
    expose:
      - 8000
    env_file:
      - .env
    networks:
      - chat_common_network
    depends_on:
      clickhouse:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      cassandra-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/api/health\")' || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  celery-worker:
    build: .
    container_name: chat-celery-worker
    command: /app/.venv/bin/celery -A app.adapters.jobs.celery_app.celery_app worker --loglevel=info
    user: "1000:1000"
    env_file:
      - .env
    networks:
      - chat_common_network
    depends_on:
      clickhouse:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      cassandra-migrations:
        condition: service_completed_successfully
    restart: unless-stopped

  celery-beat:
    build: .
    container_name: chat-celery-beat
    command: /app/.venv/bin/celery -A app.adapters.jobs.celery_app.celery_app beat --loglevel=info
    env_file:
      - .env
    networks:
      - chat_common_network
    depends_on:
      clickhouse:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      cassandra-migrations:
        condition: service_completed_successfully
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: chat-mongodb
    command: [
      "--replSet", "rs0",
      "--bind_ip_all",
      "--auth",
      "--keyFile", "/data/keyfile.pem"
    ]
    expose:
      - 27017
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DBNAME}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo/keyfile.pem:/data/keyfile.pem:ro
    networks:
      - chat_common_network
    healthcheck:
      test: [ "CMD", "mongosh", "--username", "${MONGO_INITDB_ROOT_USERNAME}", "--password", "${MONGO_INITDB_ROOT_PASSWORD}", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    mem_limit: 512m
    cpus: 0.5
    restart: unless-stopped

  mongodb-init:
    image: mongo:7.0
    container_name: chat-mongodb-init
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    entrypoint: >
      bash -c "
        until mongosh --host mongodb -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")' >/dev/null 2>&1;
        do sleep 1; done;
        echo 'âœ… Mongo is up, initiating replica set...';
        mongosh --host mongodb -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval '
          try {
            rs.initiate({
              _id: \"rs0\",
              members: [{ _id: 0, host: \"mongodb:27017\" }]
            });
            print(\"Replica set initialized\");
          } catch(e) { print(\"Replica set already initialized or error: \", e) }
        '
      "
    networks:
      - chat_common_network
    restart: "no"

  memcached:
    image: memcached:latest
    container_name: chat-memcached
    expose:
      - 11211
    command:
      - memcached
      - -m 64
      - -v
      - -I 1m
    networks:
      - chat_common_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    mem_limit: 128m
    cpus: 0.25
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: chat-redis
    command: [ "redis-server", "--appendonly", "yes" ]
    expose:
      - 6379
    volumes:
      - redis-data:/data
    networks:
      - chat_common_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
    mem_limit: 64m
    cpus: 0.1
    restart: unless-stopped

  cassandra:
    image: cassandra:4.1
    container_name: chat-cassandra
    expose:
      - 9042
    environment:
      CASSANDRA_CLUSTER_NAME: "chat-cluster"
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      MAX_HEAP_SIZE: 512M
      HEAP_NEWSIZE: 100M
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - chat_common_network
    healthcheck:
      test: [ "CMD", "cqlsh", "-u", "${CASSANDRA_USER}", "-p", "${CASSANDRA_PASSWORD}", "-e", "describe keyspaces;" ]
      interval: 40s
      timeout: 10s
      retries: 6
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024m
        reservations:
          cpus: "0.5"
          memory: 256M
    mem_limit: 1024m
    cpus: 1.0
    restart: unless-stopped

  cassandra-migrations:
    build: .
    container_name: chat-cassandra-migrations
    command: [ "/app/.venv/bin/python", "/app/cassandra_migrations/run_migrations.py" ]
    env_file:
      - .env
    networks:
      - chat_common_network
    depends_on:
      cassandra:
        condition: service_healthy

  clickhouse:
    image: clickhouse/clickhouse-server:24.8.4
    container_name: chat-clickhouse
    expose:
      - 8123
      - 9000
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - chat_common_network
    healthcheck:
        test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1' || exit 1"]
        interval: 30s
        timeout: 10s
        retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    mem_limit: 512m
    cpus: 0.5
    restart: unless-stopped


networks:
  chat_common_network:
    external: true
    name: chat_common_network

volumes:
  redis-data:
  mongodb_data:
  cassandra_data:
  clickhouse_data: